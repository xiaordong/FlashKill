// Code generated by Kitex v0.11.3. DO NOT EDIT.

package flashkill

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	flashkill "server/rpc/kitex_gen/FlashKill"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Register": kitex.NewMethodInfo(
		registerHandler,
		newFlashKillRegisterArgs,
		newFlashKillRegisterResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Login": kitex.NewMethodInfo(
		loginHandler,
		newFlashKillLoginArgs,
		newFlashKillLoginResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GenToken": kitex.NewMethodInfo(
		genTokenHandler,
		newFlashKillGenTokenArgs,
		newFlashKillGenTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	flashKillServiceInfo                = NewServiceInfo()
	flashKillServiceInfoForClient       = NewServiceInfoForClient()
	flashKillServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return flashKillServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return flashKillServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return flashKillServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "FlashKill"
	handlerType := (*flashkill.FlashKill)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "flashkill",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*flashkill.FlashKillRegisterArgs)

	err := handler.(flashkill.FlashKill).Register(ctx, realArg.B, realArg.Seller)
	if err != nil {
		return err
	}

	return nil
}
func newFlashKillRegisterArgs() interface{} {
	return flashkill.NewFlashKillRegisterArgs()
}

func newFlashKillRegisterResult() interface{} {
	return flashkill.NewFlashKillRegisterResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*flashkill.FlashKillLoginArgs)

	err := handler.(flashkill.FlashKill).Login(ctx, realArg.B, realArg.Seller)
	if err != nil {
		return err
	}

	return nil
}
func newFlashKillLoginArgs() interface{} {
	return flashkill.NewFlashKillLoginArgs()
}

func newFlashKillLoginResult() interface{} {
	return flashkill.NewFlashKillLoginResult()
}

func genTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*flashkill.FlashKillGenTokenArgs)
	realResult := result.(*flashkill.FlashKillGenTokenResult)
	success, err := handler.(flashkill.FlashKill).GenToken(ctx, realArg.B, realArg.Seller)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newFlashKillGenTokenArgs() interface{} {
	return flashkill.NewFlashKillGenTokenArgs()
}

func newFlashKillGenTokenResult() interface{} {
	return flashkill.NewFlashKillGenTokenResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, b *flashkill.Buyer, seller *flashkill.Seller) (err error) {
	var _args flashkill.FlashKillRegisterArgs
	_args.B = b
	_args.Seller = seller
	var _result flashkill.FlashKillRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) Login(ctx context.Context, b *flashkill.Buyer, seller *flashkill.Seller) (err error) {
	var _args flashkill.FlashKillLoginArgs
	_args.B = b
	_args.Seller = seller
	var _result flashkill.FlashKillLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return nil
}

func (p *kClient) GenToken(ctx context.Context, b *flashkill.Buyer, seller *flashkill.Seller) (r string, err error) {
	var _args flashkill.FlashKillGenTokenArgs
	_args.B = b
	_args.Seller = seller
	var _result flashkill.FlashKillGenTokenResult
	if err = p.c.Call(ctx, "GenToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
